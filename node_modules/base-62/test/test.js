var assert = require('assert')
var base62 = require('../index')

describe('encode', function () {
  it('should encode a number to a Base62 string', function () {
    assert.equal(base62.encode(999), 'g7')
    assert.equal(base62.encode(65), '13')
    assert.equal(base62.encode(10000000000001), '2Q3rKTOF')
    assert.equal(base62.encode(10000000000002), '2Q3rKTOG')
  })
})

describe('decode', function () {
  it('should decode a number from a Base62 string', function () {
    assert.equal(base62.decode('g7'), 999)
    assert.equal(base62.decode('13'), 65)
    assert.equal(base62.decode('2Q3rKTOF'), 10000000000001)
    assert.equal(base62.decode('2Q3rKTOH'), 10000000000003)
  })
})

describe('setCharacterSequence', function () {
  it('should update the character sequence', function () {
    base62.setAlphabet('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz')

        // Test default character set is not intact
    assert.notEqual(base62.encode(999), 'g7')

        // Test new character set test cases
    var testCases = {
      'G7': 999,
      'Lxf7': 5234233,
      'qx': 3283,
      '29': 133,
      '1S': 90,
      '3k': 232,
      '4I': 266,
      '2X': 157,
      '1E': 76,
      '1L': 83
    }

    Object.keys(testCases).forEach(function (base62String) {
      assert.equal(base62.encode(testCases[base62String]), base62String)
      assert.equal(base62.decode(base62String), testCases[base62String])
    })
  })
})

describe('throw exceptions', function () {
  it('should throw exceptions on invalid strings', function () {
    assert.throws(function () {
      base62.setAlphabet('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxy')
    }, /Alphabet must be 62 characters long/)

    assert.throws(function () {
      base62.setAlphabet('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxzz')
    }, /You must use unique characters/)

    assert.throws(function () {
      base62.setAlphabet(123456789)
    }, /Alphabet must be a string/)

    assert.throws(function () {
      base62.decode(12345678)
    }, /b62str must be a string/)

    assert.throws(function () {
      base62.encode('g7')
    }, /b62num must be a number/)
  })
})
